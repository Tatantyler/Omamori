chunk = {stat semicolon} [laststat semicolon]

block = chunk

stat =  varlist oper_assignment explist | 
     functioncall | 
     keyword_do block keyword_end | 
     keyword_while exp keyword_do block keyword_end | 
     keyword_repeat block keyword_until exp | 
     keyword_if exp keyword_then block {keyword_elseif exp keyword_then block} [keyword_else block] keyword_end | 
     keyword_for identifier oper_assignment exp comma exp [comma exp] keyword_do block keyword_end | 
     keyword_for namelist keyword_in explist keyword_do block keyword_end | 
     keyword_function funcname funcbody | 
     keyword_local keyword_function identifier funcbody | 
     keyword_local namelist [`=´ explist] 

laststat = keyword_return [explist] | keyword_break

funcname = identifier {period identifier} [colon identifier]

varlist = var {comma var}

namelist = identifier {comma identifier}

explist = exp {comma exp}

exp =  value_nil | value_false | value_true | numeric_literal | string_literal | `...´ | function | prefixexp | tableconstructor | exp binop exp | unop exp

prefixexp = identifier | open_paren exp close_paren

//primaryexp = prefixexp rest
primaryexp = prefixexp { period identifier | colon identifier args | args }
//primaryexp = prefixexp { period identifier | [colon identifier] args }

//rest = <empty> | period identifier rest | colon identifier args rest | args rest
//rest = [period identifier rest | colon identifier args rest | args rest]

assignment_or_call = primaryexp [comma | oper_assignment]

// rest1 = empty | comma | equals
// rest1 = [comma | equals]

//prefixexp = var | functioncall | open_paren exp close_paren

var =  identifier | prefixexp open_squarebracket exp close_squarebracket | prefixexp period identifier 

functioncall =  prefixexp args | prefixexp colon identifier args 

args =  open_paren [explist] close_paren | tableconstructor | string_literal

function = keyword_function funcbody

funcbody = open_paren [parlist] close_paren block keyword_end

parlist = namelist [comma ellipsis] | ellipsis

tableconstructor = open_curlybrace [fieldlist] close_curlybrace

fieldlist = field {fieldsep field} [fieldsep]

field = open_squarebracket exp close_squarebracket oper_assignment exp | exp oper_assignment exp | exp

fieldsep = comma | semicolon

binop = oper_plus | oper_minus | oper_multiply | oper_divide | oper_exp | oper_modulus | cmp_less | cmp_greater | cmp_less_or_equal | cmp_greater_or_equal | cmp_equal | cmp_unequal | oper_and | oper_or

unop = oper_inverse | oper_not | oper_len

-- original

chunk ::= {stat [`;´]} [laststat [`;´]]

block ::= chunk

stat ::=  varlist `=´ explist | 
     functioncall | 
     do block end | 
     while exp do block end | 
     repeat block until exp | 
     if exp then block {elseif exp then block} [else block] end | 
     for Name `=´ exp `,´ exp [`,´ exp] do block end | 
     for namelist in explist do block end | 
     function funcname funcbody | 
     local function Name funcbody | 
     local namelist [`=´ explist] 

laststat ::= return [explist] | break

funcname ::= Name {`.´ Name} [`:´ Name]

varlist ::= var {`,´ var}

var ::=  Name | prefixexp `[´ exp `]´ | prefixexp `.´ Name 

namelist ::= Name {`,´ Name}

explist ::= {exp `,´} exp

exp ::=  nil | false | true | Number | String | `...´ | function | 
     prefixexp | tableconstructor | exp binop exp | unop exp 

prefixexp ::= var | functioncall | `(´ exp `)´

functioncall ::=  prefixexp args | prefixexp `:´ Name args 

args ::=  `(´ [explist] `)´ | tableconstructor | String 

function ::= function funcbody

funcbody ::= `(´ [parlist] `)´ block end

parlist ::= namelist [`,´ `...´] | `...´

tableconstructor ::= `{´ [fieldlist] `}´

fieldlist ::= field {fieldsep field} [fieldsep]

field ::= `[´ exp `]´ `=´ exp | Name `=´ exp | exp

fieldsep ::= `,´ | `;´

binop ::= `+´ | `-´ | `*´ | `/´ | `^´ | `%´ | `..´ | 
     `<´ | `<=´ | `>´ | `>=´ | `==´ | `~=´ | 
     and | or

unop ::= `-´ | not | `#´